*snipewin.txt*                     Manipulate windows most quickly like sniper

Author: Hibiki <mail@4513echo.dev>
License: MIT License
URL: https://github.com/4513ECHO/vim-snipewin
Last change: 2023 Aug 30

==============================================================================
CONTENTS                                                   *snipewin-contents*

Introduction					|snipewin-introduction|
Interface					|snipewin-interface|
  Key Mappings					|snipewin-key-mappings|
  Functions					|snipewin-functions|
  Variables					|snipewin-variables|
  Callbacks					|snipewin-callbacks|
  Filters					|snipewin-filters|
  Lua Interface					|snipewin-lua-interface|
  Highlight Groups				|snipewin-highlight-groups|
About						|snipewin-about|

==============================================================================
INTRODUCTION                                           *snipewin-introduction*

*snipewin* ( *vim-snipewin* ) is a plugin to provide interactive |window|
selector. The selector can be used to manipulate anything about window
through |snipewin-callbacks|.

The main idea is inspired by tmux's `display-panes` feature, vim-|choosewin|
and chowcho.nvim.

https://github.com/t9md/vim-choosewin
https://github.com/tkmpypy/chowcho.nvim

Vim v9.0.0000+ or Neovim v0.8.0+ is required.

==============================================================================
INTERFACE                                                 *snipewin-interface*

------------------------------------------------------------------------------
KEY MAPPINGS                                           *snipewin-key-mappings*

<Plug>(snipewin)                                            *<Plug>(snipewin)*
	The mapping version of |snipewin#select()|.

	Expamle: >
		nnoremap <C-w>W <Plug>(snipewin)

------------------------------------------------------------------------------
FUNCTIONS                                                 *snipewin-functions*

snipewin#select([{callback}])                              *snipewin#select()*
	Start selecting windows.
	{callback} is optional |Funcref| that called after confirm selecting.
	See |snipewin-callbacks| for details.
	Return a result of {callback} if it called, otherwise return |v:null|.
	If your Vim/Neovim supports mouse, selecting by click is enabled.

	NOTE: If typed charactor is lower case alphabet, treated as upper case.
	NOTE: If typed charactor is invalid, Selecting is canceled and
	callback is not called.

------------------------------------------------------------------------------
VARIABLES                                                 *snipewin-variables*

g:snipewin_filters                                        *g:snipewin_filters*
		|List| of |Funcref| (default: `[]`)
	Filters to judge whether a window should not be labeled.
	Each function recieves |window-ID| and return |Boolean|.
	Only windows that pass all filter functions are labeled.

	Expamle to ignore current window: >
		let g:snipewin_filters = [{ winid -> winid !=# win_getid() }]
<
	See |snipewin-filters| for builtin filters.

g:snipewin_ignore_single                            *g:snipewin_ignore_single*
		|Boolean| (default: |v:false|)
	If |v:true| cancel selecting immediately when only one window exists.

g:snipewin_label_chars                                *g:snipewin_label_chars*
		|String| (default: "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
	The set of charactors used for label, used from the head.
	Only upper case alphabets are acceptable.

	WARNING: If the number of windows overflows the length of this
	variable, You cannot select the rest of windows without mouse.

g:snipewin_label_font                                  *g:snipewin_label_font*
		|String| (default: "asciian")
	The font used for label. "asciian", "asciian_inverted" are available.

g:snipewin_label_pixel                                *g:snipewin_label_pixel*
		|String| (default: "#")
	The single charactor used for pixel of the label.

g:snipewin_override_winopts                      *g:snipewin_override_winopts*
		|Dictionary| (default: `{}`)
	Override configs of label window, such as border or zindex.
	See |popup_create-arguments| in Vim or |nvim_open_win()| in Neovim for
	specifically option names.

------------------------------------------------------------------------------
CALLBACKS                                                 *snipewin-callbacks*

Callback of |snipewin#select()| is a |Funcref| that recieves |window-ID| of
selected window.
Callback is always called in the current window.
If {callback} is ommited, |g:snipewin#callback#default| is used.

Expamle to pass through winid: >
	call snipewin#select({ winid -> winid })

BUILTIN CALLBACKS~
	Following builtin callbacks are available.

g:snipewin#callback#default                      *g:snipewin#callback#default*
	Default callback of |snipewin#select()| and you can define this. It is
	alias of |g:snipewin#callback#goto| by default.

g:snipewin#callback#close                          *g:snipewin#callback#close*
	Execute |:close| in target window.

g:snipewin#callback#hide                            *g:snipewin#callback#hide*
	Execute |:hide| in target window.

g:snipewin#callback#goto                            *g:snipewin#callback#goto*
	Go to target window.

g:snipewin#callback#only                            *g:snipewin#callback#only*
	Execute |:only| in target window.

g:snipewin#callback#swap                            *g:snipewin#callback#swap*
	Swap displayed buffers between current window and target window.
	It may fallback to |CTRL-W_x| if possible.

	WARNING: Unlike |CTRL-W_x|, this callback does not actually exchange
	the windows. This means that window-local options (|global-local|)
	will not be inheritd correctly.

------------------------------------------------------------------------------
FILTERS                                                     *snipewin-filters*

BUILTIN FILTERS~
	Following builtin filters are available.

g:snipewin#filter#filetype                        *g:snipewin#filter#filetype*
	Higher-order function that recieves a list of filtypes to ignore.

	Expamle: >
	" Ignore famous fuzzy finder plugins.
	let g:snipewin_filters = [
	       \ g:snipewin#filter#filetype(['fzf', 'ctrlp', 'ddu-ff']),
	       \ ]

g:snipewin#filter#floatwin                        *g:snipewin#filter#floatwin*
	Filter to ignore Neovim's floating window (|api-floatwin|).

------------------------------------------------------------------------------
LUA INTERFACE                                         *snipewin-lua-interface*

NOTE: This feature is only available in Neovim.

Unlike |vim.fn|, Funcref through |lua-vim-variables| is not converted to lua
function but |vim.NIL|. This is a serious problem for snipewin when accessing
callbacks and filters. The following features provide a proxy to work around
these problems.

snipewin.select([{callback}])                              *snipewin.select()*
	The wrapper function for |snipewin#select()|.
	It almost same as it, but return `nil` when {callback} is not called.

snipewin.callback.{name}                                   *snipewin.callback*
	The proxy table for builtin callbacks (|snipewin-callbacks|).
	For example, `callback.goto` is same as |g:snipewin#callback#goto|.

snipewin.filter.{name}                                       *snipewin.filter*
	The proxy table for builtin filters (|snipewin-filters|).
	For example, `filters.floatwin` is same as |g:snipewin#filters#floatwin|.

------------------------------------------------------------------------------
HIGHLIGHT GROUPS                                   *snipewin-highlight-groups*

SnipeWinLabel                                               *hl-SnipeWinLabel*
	The highlight group used for label of |snipewin#select()|.
	It is linked to `Label` (see |group-name|) in default.

==============================================================================
ABOUT                                                         *snipewin-about*

|snipewin| is developed by Hibiki(4513ECHO) and licensed under the MIT
License. Visit the project page for the latest version:

	https://github.com/4513ECHO/vim-snipewin

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
